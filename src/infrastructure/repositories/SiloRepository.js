// ==============================
// üì¶ Imports
// ==============================
import { pool } from '../database/db.js';
import { Silo } from '../../domain/entities/Silo.js';
import { logger } from '../config/logger.js';

// ==============================
// üèóÔ∏è Repository Class
// ==============================
export class SiloRepository {
  // üîπ ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸàÿßŸÖÿπ
  async findAll() {
    const query = `
      SELECT id, silo_number, silo_group_id, cable_count
      FROM silos
      ORDER BY silo_number ASC
    `;

    try {
      const [rows] = await pool.query(query);

      // üß† ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿ•ŸÑŸâ ŸÉŸäÿßŸÜÿßÿ™ Silo
      return rows.map(row => new Silo({
        id: row.id,
        siloNumber: row.silo_number,
        siloGroupId: row.silo_group_id,
        cableCount: row.cable_count
      }));

    } catch (err) {
      logger.error(`[SiloRepository.findAll] ‚ùå ${err.message}`);
      throw new Error('Database error while fetching silos');
    }
  }

  // üîπ ÿ¨ŸÑÿ® ÿµŸàŸÖÿπÿ© Ÿàÿßÿ≠ÿØÿ© ÿ≠ÿ≥ÿ® ID
  async findById(id) {
    const query = `
      SELECT id, silo_number, silo_group_id, cable_count
      FROM silos
      WHERE id = ?
      LIMIT 1
    `;

    try {
      const [rows] = await pool.query(query, [id]);

      if (rows.length === 0) return null;

      const row = rows[0];
      return new Silo({
        id: row.id,
        siloNumber: row.silo_number,
        siloGroupId: row.silo_group_id,
        cableCount: row.cable_count
      });

    } catch (err) {
      logger.error(`[SiloRepository.findById] ‚ùå ${err.message}`);
      throw new Error(`Failed to fetch silo with id ${id}`);
    }
  }

  // üîπ ÿ¨ŸÑÿ® ÿµŸàŸÖÿπÿ© ÿ≠ÿ≥ÿ® ÿ±ŸÇŸÖŸáÿß (silo_number)
  async findByNumber(siloNumber) {
    const query = `
      SELECT id, silo_number, silo_group_id, cable_count
      FROM silos
      WHERE silo_number = ?
      LIMIT 1
    `;

    try {
      const [rows] = await pool.query(query, [siloNumber]);

      if (rows.length === 0) return null;

      const row = rows[0];
      return new Silo({
        id: row.id,
        siloNumber: row.silo_number,
        siloGroupId: row.silo_group_id,
        cableCount: row.cable_count
      });

    } catch (err) {
      logger.error(`[SiloRepository.findByNumber] ‚ùå ${err.message}`);
      throw new Error(`Failed to fetch silo number ${siloNumber}`);
    }
  }
}